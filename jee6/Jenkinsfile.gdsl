pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                catchError {
                    echo '>>> Checkout du repository ' + params.SVN_URL + '<<<'
                    checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[credentialsId: 'eandx00atsvn', depthOption: 'infinity', ignoreExternalsOption: true, local: '.', remote: params.SVN_URL]], workspaceUpdater: [$class: 'UpdateUpdater']])
                }
            }
        }
        stage('Build') {
            steps {
                echo '>>> Construction et livraison dans ARTIFACTORY'
                // penser a mettre DEPLOY
                withEnv(["JAVA_HOME=${tool 'JDK8'}", "PATH+MAVEN=${tool 'maven-3.2'}/bin:${env.JAVA_HOME}/bin"]) {
                    sh "mvn clean install -Dmaven.test.skip=true -P${params.PROFIL_JDK},int -X"
                }
            }
        }
        stage('Test') {
            steps {
                catchError {
                    withEnv(["JAVA_HOME=${tool 'JDK8'}", "PATH+MAVEN=${tool 'maven-3.2'}/bin:${env.JAVA_HOME}/bin"]) {
                        sh "mvn -fn test -P${params.PROFIL_JDK},int -Daggregate=true -DtestFailureIgnore=true"
                    }
                    junit "target/test-reports/TEST*.xml"
                }
                step([$class: 'Mailer', recipients: 'admin@somewhere'])
            }
        }
        stage('Quality') {
            steps {
                echo ">>> QUALITE SONARQUBE <<< "
                script {
                    def sonarqube = fileLoader.fromGit('src/main/groovy/sonarqube', 'https://gitlab.com/hm-eand/jenkins-ci.git', 'master', 'TOURET-AATGITLAB')
                    sonarqube.runQuality()
                }
            }
        }
        stage('Deploy') {
            steps {
                echo "Deploiement"
                script {
                    echo ">>> Chargement du fichier jenkins-jee6 ... <<<"
                    def jenkinsjee6 = fileLoader.fromGit('src/main/groovy/jenkins-jee6', 'https://gitlab.com/hm-eand/jenkins-ci.git', 'master', 'TOURET-AATGITLAB')
                    jenkinsjee6.deployInWeblogic()
                }

            }
        }
        stage('Release') {
            steps() {
                echo ">>> Creation de la release : [" + params.IS_RELEASE + "] <<<"
                script {
                    timeout(time: 1, unit: 'HOURS') {
                        if (params.IS_RELEASE == true) {
                            def sonarScannerHome = tool 'sonar-scanner-2.6.1'
                            def workspace = pwd()
                            def release = input id: 'release', message: 'Informations de la releaser à créer', parameters: [string(defaultValue: '1.0.0-SNAPSHOT', description: 'New SNAPSHOT', name: 'developmentVersion'), string(defaultValue: '1.0.0_01', description: 'New release', name: 'releaseVersion')], submitterParameter: 'submitter'
                            echo ">>> Creation de la release [" + release['developmentVersion'] + "/" + release['releaseVersion'] + "] <<<"
                            withEnv(["JAVA_HOME=${tool 'JDK8'}", "PATH+MAVEN=${tool 'maven-3.2'}/bin:${env.JAVA_HOME}/bin"]) {
                                sh "mvn --batch-mode release:prepare release:perform -P${params.PROFIL_JDK},dev"
                            }
                            // test presence fichier rollback
                            if (fileExists('pom.xml.releaseBackup')) {
                                echo ">>> ROLLBACK de la précédente release <<<"
                                withEnv(["JAVA_HOME=${tool 'JDK8'}", "PATH+MAVEN=${tool 'maven-3.2'}/bin:${env.JAVA_HOME}/bin"]) {
                                    sh "mvn release:rollback"
                                }
                            }
                            if (fileExists('${workspace}/target/checkout/pom.xml')) {
                                withEnv(["JAVA_HOME=${tool 'JDK8'}", "PATH+MAVEN=${tool 'maven-3.2'}/bin:${env.JAVA_HOME}/bin"]) {
                                    sh "mvn clean resources:resources deploy -Pint,${params.PROFIL_JDK} -f ${workspace}/target/checkout/pom.xml"
                                }
                                withSonarQubeEnv {
                                    sh "${sonarScannerHome}/bin/sonar-scanner -Dproject.settings=${workspace}/target/checkout/target/classes/sonar-project.properties  -Dsonar.java.binaries=target/classes -e "
                                }
                                withEnv(["JAVA_HOME=${tool 'JDK8'}", "PATH+MAVEN=${tool 'maven-3.2'}/bin:${env.JAVA_HOME}/bin"]) {
                                    sh "mvn clean deploy -Pint,${params.PROFIL_JDK} -f ${workspace}/target/checkout/pom.xml"
                                    sh "mvn clean deploy -Prec,${params.PROFIL_JDK} -f ${workspace}/target/checkout/pom.xml"
                                    sh "mvn clean deploy -Pppd,${params.PROFIL_JDK} -f ${workspace}/target/checkout/pom.xml"
                                    sh "mvn clean deploy -Pprd,${params.PROFIL_JDK} -f ${workspace}/target/checkout/pom.xml"
                                }
                            }
                        }
                    }

                }
            }
        }
    }
}
